Cho dãy số A[] = (a1, a2, .., an) và số tự nhiên K. Hãy đưa ra tất cả các dãy con
của dãy số A[] sao cho tổng các phần tử của dãy con đó đúng bằng K. Các phần
tử của dãy số A[] được giả thuyết là nguyên dương và không có các phần tử giống
nhau. Ví dụ với dãy con A[] = {5, 10, 15, 20, 25}, K = 50 ta có 3 dãy con {5, 10,
15, 20}, {5, 20, 25}, {10, 15, 25}.
Input Format
Dòng thứ 1 đưa vào số N là số lượng phần tử của dãy số A[] và số K; Dòng tiếp
theo đưa vào N phần tử của dãy số A[].
Constraints
1<=N<=15; 1<=A[i],K<=100;

Output Format
Đưa ra tất cả các dãy con của dãy số A[] thỏa mãn yêu cầu bài toán theo thứ tự
từ điển, trong đó mỗi dãy con được bao bởi các ký tự [, ]. Nếu không có dãy con
nào thỏa mãn yêu cầu bài toán, hãy đưa ra -1.
Sample Input 0
10 26
12 11 9 10 6 8 14 7 5 13
Sample Output 0
[5 6 7 8]
[5 7 14]
[5 8 13]
[5 9 12]
[5 10 11]
[6 7 13]
[6 8 12]
[6 9 11]
[7 8 11]
[7 9 10]
[12 14]

#include <bits/stdc++.h>
#define vinh ios::sync_with_stdio(false);cin.tie(nullptr);
#define anonymous main
#define int long long
#define my_for(i,a,b) for(int i=a;i<b;i++)
#define my_For(i,a,b) for(int i=a;i>=b;i--)
#define foreach(x,a) for(auto x:a)
#define Foreach(x,a) for(auto &x:a)
using namespace std;
int a[100],n,k,x[100];vector<vector<int>> d;
void ql(int i,int pos,int sum)
{
	my_for(j,pos,n+1)
	{
		x[i]=a[j];
		sum+=a[j];
		if(sum==k)
		{
			vector<int> a;
			my_for(l,1,i+1) 
			{
				a.push_back(x[l]);
				sort(a.begin(),a.end());
			}
			d.push_back(a);	
		}
		else if(sum<k)
		{
			ql(i+1,j+1,sum);
		}
		sum-=a[j];
	}
}
anonymous()
{
	vinh
	cin>>n>>k;
	my_for(i,1,n+1) cin>>a[i];
	ql(1,1,0);
	sort(d.begin(),d.end());
	my_for(i,0,d.size())
	{
		cout<<"[";
		my_for(j,0,d[i].size()) 
		{
			cout<<d[i][j];
			if(j<d[i].size()-1) cout<<" ";
		}
		cout<<"]"<<endl;
	}
}
