Cho 2 số nguyên dương N và K, bạn hãy liệt kê các các tổ hợp K phần tử các số có
1 chữ số mà có tổng bằng N. Mỗi tổ hợp chỉ tính 1 lần và được in ra theo thứ tự từ
bé đến lớn, các tổ hợp cũng được liệt kê theo thứ tự từ điển tăng dần. Nếu không
tồn tại tổ hợp K phần tử thỏa mãn có tổng bằng N in ra NOT FOUND
Input Format
 Dòng duy nhất chứa N và K
Constraints
 2<=K<=9
 1<=N<=60
Output Format
In ra các cấu hình thỏa mãn trên từng dòng
Sample Input 0
25 9
Sample Output 0
NOT FOUND
Sample Input 1
38 7
Sample Output 1

1 + 2 + 5 + 6 + 7 + 8 + 9
1 + 3 + 4 + 6 + 7 + 8 + 9
2 + 3 + 4 + 5 + 7 + 8 + 9
#include <bits/stdc++.h>
#define vinh ios::sync_with_stdio(false);cin.tie(nullptr);
#define anonymous main
#define int long long
#define my_for(i,a,b) for(int i=a;i<b;i++)
#define my_For(i,a,b) for(int i=a;i>=b;i--)
#define foreach(x,a) for(auto x:a)
#define Foreach(x,a) for(auto &x:a)
using namespace std;
int s,k,x[100];vector<string> d;
void ql(int i,int pos,int sum)
{
	if(sum>s) return ;
	my_for(j,pos,10)
	{
		x[i]=j;		
		sum+=j;
		if(i==k)
		{
			if(sum==s) 
			{
//				cout<<sum<<" ";
				string tmp="";
				my_for(u,1,i+1) tmp+=to_string(x[u]);
				d.push_back(tmp);
//				cout<<tmp<<endl;
			}	
		}
		else ql(i+1,j+1,sum);
		sum-=j;
	}
}
anonymous()
{
	vinh
	cin>>s>>k;
	ql(1,1,0);
	if(d.size()==0) cout<<"NOT FOUND";
	else
	{
		sort(d.begin(),d.end());
		foreach(x,d)
		{
			my_for(i,0,x.size())
			{
				cout<<x[i];
				if(i<x.size()-1) cout<<" + ";
			}
			cout<<endl;
		}
	}
}
