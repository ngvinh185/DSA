Cho mảng A[] gồm N số nguyên dương phân biệt và số X. Nhiệm vụ của bạn là
tìm phép tổ hợp các số trong mảng A[] có tổng bằng X. Các số trong mảng A[] có
thể được sử dụng nhiều lần. Mỗi tổ hợp các số của mảng A[] được in ra theo thứ
tự không giảm các số. Ví dụ với A[] = {2, 4, 6, 8}, X = 8 ta có các tổ hợp các số
như sau: {2, 2, 2, 2}, {2, 2, 4}, {2, 6}, {4, 4}, {8}.
Input Format
Dòng thứ nhất là hai số N và X; dòng tiếp theo đưa vào N số của mmảng A[]; các
số được viết cách nhau một vài khoảng trống
Constraints
1<=N<=20; 1<=X,A[i]<=100;

Output Format
In ra số tổ hợp thỏa mãn sau đó in ra các tổ hợp thỏa mãn trên từng dòng. Xem
output để rõ hơn cách in. Trong trường hợp không có tổ hợp thỏa mãn thì in ra -1.
Sample Input 0
3 10
4 2 3
Sample Output 0
5
{2 2 2 2 2}
{2 2 2 4}
{2 2 3 3}
{2 4 4}
{3 3 4}

#include <bits/stdc++.h>
#define vinh ios::sync_with_stdio(false);cin.tie(nullptr);
#define anonymous main
#define int long long
#define my_for(i,a,b) for(int i=a;i<b;i++)
#define my_For(i,a,b) for(int i=a;i>=b;i--)
#define foreach(x,a) for(auto x:a)
#define Foreach(x,a) for(auto &x:a)
using namespace std;
int a[100],n,x[100],s,cnt=0;
void ql(int i,int pos,int sum)
{
	my_for(j,pos,n+1)
	{
		if(sum+a[j]<=s)
		{
			x[i]=a[j];
			if(sum+x[i]==s)
			{
				cnt+=1;
				cout<<"{";
				my_for(u,1,i+1) 
				{
					cout<<x[u];
					if(u<i) cout<<" ";
				}
				cout<<"}"<<endl;
			}
			else 
			{
				ql(i+1,j,sum+a[j]);
			}
		}
	}
}
anonymous()
{
	vinh
	cin>>n;
	cin>>s;
	my_for(i,1,n+1) 
	{
		cin>>a[i];
	}
	sort(a+1,a+n+1);
	ql(1,1,0);
	if(cnt==0) cout<<-1;
	
}
