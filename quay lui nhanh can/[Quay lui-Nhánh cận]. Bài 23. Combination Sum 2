Cho 2 số nguyên dương N và K, bạn hãy liệt kê các các tổ hợp K phần tử các số
nguyên tố mà có tổng bằng N. Mỗi tổ hợp chỉ tính 1 lần và được in ra theo thứ tự
từ bé đến lớn, các tổ hợp cũng được liệt kê theo thứ tự từ điển tăng dần. Nếu
không tồn tại tổ hợp K phần tử thỏa mãn có tổng bằng N in ra NOT FOUND
Input Format
 Dòng duy nhất chứa N và K
Constraints
 1<=K<=9
 1<=N<=500
Output Format
In ra các cấu hình thỏa mãn trên từng dòng
Sample Input 0
91 3
Sample Output 0
3 + 5 + 83
3 + 17 + 71
3 + 29 + 59
3 + 41 + 47
5 + 7 + 79
5 + 13 + 73
5 + 19 + 67
7 + 11 + 73
7 + 13 + 71
7 + 17 + 67
7 + 23 + 61
7 + 31 + 53
7 + 37 + 47
7 + 41 + 43
11 + 13 + 67
11 + 19 + 61
11 + 37 + 43
13 + 17 + 61
13 + 19 + 59

13 + 31 + 47
13 + 37 + 41
17 + 31 + 43
19 + 29 + 43
19 + 31 + 41
23 + 31 + 37
#include <bits/stdc++.h>
#define vinh ios::sync_with_stdio(false);cin.tie(nullptr);
#define anonymous main
#define int long long
#define my_for(i,a,b) for(int i=a;i<b;i++)
#define my_For(i,a,b) for(int i=a;i>=b;i--)
#define foreach(x,a) for(auto x:a)
#define Foreach(x,a) for(auto &x:a)
using namespace std;
int s,k,x[100];vector<vector<int>> d;
bool checknt(int n)
{
	if(n<2) return false;
	my_for(i,2,sqrt(n)+1)
	{
		if(n%i==0) return false;
	}
	return true;
}
void ql(int i,int pos,int sum)
{
	if(sum>s) return ;
	my_for(j,pos,s)
	{
		if(checknt(j))
		{
			x[i]=j;
			sum+=j;
			if(i==k)
			{
				if(sum==s)
				{
					vector<int> tmp(x+1,x+i+1);
					d.push_back(tmp);
				}
			}
			else ql(i+1,j+1,sum);
			sum-=j;
		}
	}
}
anonymous()
{
	vinh
	cin>>s>>k;
	ql(1,2,0);
	foreach(x,d)
	{
		my_for(i,0,x.size())
		{
			cout<<x[i];
			if(i<x.size()-1) cout<<" + ";	
		}
		cout<<endl;
	}
}
